import struct
from collections import defaultdict
import os
import datetime
from typing import Dict, Any, Tuple, Optional, List

# ==============================================================================
# 1.Constants ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 3 Entities
# ==============================================================================

# Car: < ?i30s10sd (IsActive, ID, Model, Plate, Rate) -> 53 bytes
CAR_FORMAT = '< ?i30s10sd'
CAR_FILE_NAME = 'cars.bin'
CAR_ENCODING = 'utf-8'

# Customer: < ?i30s15s (IsActive, ID, Name, Phone) -> 50 bytes
CUSTOMER_FORMAT = '< ?i50s15s'
CUSTOMER_FILE_NAME = 'customers.bin'
CUSTOMER_ENCODING = 'utf-8'

# Rental: < ?iiidid (7 fields: IsActive, R_ID, C_ID, Car_ID, StartDate(i), EndDate(i), TotalPrice(d))
RENTAL_FORMAT = '< ?iiiiid' 
RENTAL_FILE_NAME = 'rentals.bin'
RENTAL_ENCODING = 'utf-8' 
# ==============================================================================
# 2.Base Manager
# ==============================================================================

class FileManager:
    """‡∏Ñ‡∏•‡∏≤‡∏™‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏ö‡∏ô‡∏≤‡∏£‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå, Free Space, ‡πÅ‡∏•‡∏∞ CRUD ‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"""
    
    def __init__(self, format_string: str, filename: str, encoding: str):
        self.format = format_string
        self.filename = filename
        self.encoding = encoding
        self.record_size = struct.calcsize(format_string)
        
        try:
            self.file = open(self.filename, 'r+b')
            print(f"File '{self.filename}' opened for R/W.")
        except FileNotFoundError:
            self.file = open(self.filename, 'w+b') 
            print(f"File '{self.filename}' created and opened for R/W.")
        self.file.seek(0, os.SEEK_SET)

    def close(self):
        """‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡∏∞‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ (Exit Hook)"""
        self.file.flush()
        os.fsync(self.file.fileno())
        self.file.close()
    

    # --- Utility Overrides ---

    def _pack_record(self, data: Dict[str, Any]) -> bytes:
        raise NotImplementedError("Subclass must implement _pack_record.")

    def _unpack_record(self, record_bytes: bytes) -> Dict[str, Any]:
        raise NotImplementedError("Subclass must implement _unpack_record.")

    # --- CRUD Base Logic ---

    def add_record(self, data: Dict[str, Any]) -> int:
        """C - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô (‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô)"""
        data['IsActive'] = True
        packed_data = self._pack_record(data)

        self.file.seek(0, os.SEEK_SET)
        
        while True:
            current_offset = self.file.tell() 
            
            status_byte = self.file.read(1)
            if not status_byte: break
            
            remaining_bytes = self.file.read(self.record_size - 1)
            if len(remaining_bytes) < self.record_size - 1:
                break
            
            is_active = struct.unpack('< ?', status_byte)[0]
            
            if not is_active:
                self.file.seek(current_offset, os.SEEK_SET) 
                self.file.write(packed_data)
                self.file.flush()
                print(f"‚úÖ Reusing free space at offset: {current_offset} bytes in {self.filename}.")
                return current_offset
            
        self.file.seek(0, os.SEEK_END)
        offset = self.file.tell()
        self.file.write(packed_data)
        self.file.flush()
        print(f"‚ûï Appended new record at offset: {offset} bytes in {self.filename}.")
        return offset

    def get_record_by_id(self, record_id: int) -> Optional[Tuple[Dict[str, Any], int]]:
        self.file.seek(0, os.SEEK_SET)
        offset = 0
        
        while True:
            record_bytes = self.file.read(self.record_size)
            if len(record_bytes) < self.record_size: 
                break
            
            try:
                record_data = self._unpack_record(record_bytes)
                if record_data['IsActive'] and record_data['ID'] == record_id:
                    return record_data, offset
            except struct.error: pass 
            
            offset += self.record_size
        return None

    def update_record(self, record_id: int, new_data: Dict[str, Any]) -> bool:
        """U - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô"""
        result = self.get_record_by_id(record_id)
        if result is None:
            print(f"‚ùå Error: ID {record_id} not found or is inactive in {self.filename}.")
            return False
        
        old_data, offset = result
        updated_data = old_data.copy()
        if 'EndDate' not in updated_data:
             updated_data['EndDate'] = 0 

        updated_data.update(new_data)
        updated_data['ID'] = record_id
        updated_data['IsActive'] = old_data['IsActive'] 
        updated_data.update(new_data)
        updated_data['ID'] = record_id
        updated_data['IsActive'] = old_data['IsActive'] 
        
        packed_data = self._pack_record(updated_data)
        
        self.file.seek(offset, os.SEEK_SET)
        self.file.write(packed_data)
        self.file.flush()
        
        print(f"üìù Successfully updated ID {record_id} at offset {offset} in {self.filename}.")
        return True

    def delete_record(self, record_id: int) -> bool:
        """D - ‡∏•‡∏ö‡πÅ‡∏ö‡∏ö Soft Delete"""
        result = self.get_record_by_id(record_id)
        if result is None:
            print(f"‚ùå Error: ID {record_id} not found or already deleted in {self.filename}.")
            return False
        
        _, offset = result
        deleted_flag_bytes = struct.pack('< ?', False)
        
        self.file.seek(offset, os.SEEK_SET)
        self.file.write(deleted_flag_bytes)
        self.file.flush()
        
        print(f"üóëÔ∏è Soft deleted ID {record_id} at offset {offset} in {self.filename}.")
        return True

    def get_all_records(self) -> List[Dict[str, Any]]:
        active_records = []
        self.file.seek(0, os.SEEK_SET)
        while True:
            record_bytes = self.file.read(self.record_size)
            if len(record_bytes) < self.record_size:
                break
            
            try:
                record_data = self._unpack_record(record_bytes)
                if record_data['IsActive']:
                    active_records.append(record_data)
            except struct.error: pass
        return active_records

# ==============================================================================
# 3.Minimal Overrides
# ==============================================================================

class CarManager(FileManager):
    def __init__(self):
        super().__init__(CAR_FORMAT, CAR_FILE_NAME, CAR_ENCODING)
    
    def _pack_record(self, data: Dict[str, Any]) -> bytes:
        model_bytes = data['Model'].encode(self.encoding).ljust(30, b'\x00')
        license_bytes = data['LicensePlate'].encode(self.encoding).ljust(10, b'\x00')
        
        return struct.pack(
            self.format,
            data.get('IsActive', True),
            data['ID'],
            model_bytes,
            license_bytes,
            data['DailyRate']
        )

    def _unpack_record(self, record_bytes: bytes) -> Dict[str, Any]:
        unpacked_data = struct.unpack(self.format, record_bytes)
        model = unpacked_data[2].split(b'\x00', 1)[0].decode(self.encoding, errors='ignore').strip()
        license_plate = unpacked_data[3].split(b'\x00', 1)[0].decode(self.encoding, errors='ignore').strip()
        
        return {
            'IsActive': unpacked_data[0],
            'ID': unpacked_data[1],
            'Model': model,
            'LicensePlate': license_plate,
            'DailyRate': unpacked_data[4]
        }
class CustomerManager(FileManager):
    def __init__(self):
        super().__init__(CUSTOMER_FORMAT, CUSTOMER_FILE_NAME, CUSTOMER_ENCODING)
    
    def _pack_record(self, data: Dict[str, Any]) -> bytes:
        name_bytes = data['Name'].encode(self.encoding).ljust(50, b'\x00')
        phone_bytes = data['Phone'].encode(self.encoding).ljust(15, b'\x00')
        
        return struct.pack(
            self.format,
            data.get('IsActive', True),
            data['ID'],
            name_bytes,
            phone_bytes
        )

    def _unpack_record(self, record_bytes: bytes) -> Dict[str, Any]:
        unpacked_data = struct.unpack(self.format, record_bytes)
        
        name = unpacked_data[2].split(b'\x00', 1)[0].decode(self.encoding, errors='ignore').strip()
        phone = unpacked_data[3].split(b'\x00', 1)[0].decode(self.encoding, errors='ignore').strip()
        
        return {
            'IsActive': unpacked_data[0],
            'ID': unpacked_data[1],
            'Name': name,
            'Phone': phone
        }

class RentalManager(FileManager):
    def __init__(self):
        super().__init__(RENTAL_FORMAT, RENTAL_FILE_NAME, RENTAL_ENCODING)
    
    def _pack_record(self, data: Dict[str, Any]) -> bytes:
        return struct.pack(
            self.format,
            data.get('IsActive', True),  # 1. ?
            int(data['ID']),             # 2. i
            int(data['CustomerID']),     # 3. i
            int(data['CarID']),          # 4. i
            int(data['StartDate']),      # 5. i
            int(data.get('EndDate', 0)), # 6. i
            float(data['TotalPrice'])    # 7. d
        )

    def _unpack_record(self, record_bytes: bytes) -> Dict[str, Any]:
        unpacked_data = struct.unpack(self.format, record_bytes)

        return {
            'IsActive': unpacked_data[0],
            'ID': unpacked_data[1],
            'CustomerID': unpacked_data[2],
            'CarID': unpacked_data[3],
            'StartDate': unpacked_data[4],
            'EndDate': unpacked_data[5],
            'TotalPrice': unpacked_data[6]
        }
    
# ==============================================================================
# 4.Utility ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï
# ==============================================================================

def get_user_choice(prompt: str, valid_choices: List[str]) -> str:
    """‡∏£‡∏±‡∏ö‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
    while True:
        choice = input(prompt).strip().upper()
        if choice in valid_choices:
            return choice
        print("‚ùå ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")

def get_int_input(prompt: str) -> int:
    # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô
    while True:
        try:
            return int(input(prompt).strip())
        except ValueError:
            print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")

def get_float_input(prompt: str) -> float:
    """‡∏£‡∏±‡∏ö‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° (DailyRate, TotalPrice)"""
    while True:
        try:
            return float(input(prompt).strip())
        except ValueError:
            print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")

def get_date_input(prompt: str) -> int:
    """‡∏£‡∏±‡∏ö‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô DDMMYYYY int"""
    while True:
        date_str = input(prompt).strip() 
        if len(date_str) == 8 and date_str.isdigit():
            try:
                datetime.datetime.strptime(date_str, '%d%m%Y') 
                return int(date_str)
            except ValueError:
                print("‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        else:
            print("‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô DDMMYYYY ‡πÄ‡∏ä‡πà‡∏ô 25102025")

def generate_master_report(car_mgr: 'CarManager', cust_mgr: 'CustomerManager', rental_mgr: 'RentalManager', report_filename: str = 'master_report.txt'):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Active ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å Manager"""
    
    report_content = []
    
    title = "MASTER RENTAL SYSTEM REPORT"
    report_content.append("=" * 70)
    report_content.append(f"{' ' * ((70 - len(title)) // 2)}{title}")
    report_content.append("=" * 70)
    report_content.append(f"Generated On: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    report_content.append("-" * 70)
    
    report_content.append("\n\n--- üöó ACTIVE CAR INVENTORY ---")
    car_fields = [('ID', 5), ('Model', 30), ('LicensePlate', 15), ('DailyRate', 12)]
    car_records = car_mgr.get_all_records()
    report_content.append(f"Total Active Cars: {len(car_records)}")
    
    header_line = ' | '.join(f"{name:<{length}}" for name, length in car_fields)
    report_content.append(header_line)
    report_content.append("-" * (sum(length for _, length in car_fields) + len(car_fields) * 3))
    
    if car_records:
        for car in car_records:
            line_parts = []
            for field_name, length in car_fields:
                value = car.get(field_name, '')
                if isinstance(value, float):
                    line_parts.append(f"{value:.2f}".ljust(length))
                else:
                    line_parts.append(f"{str(value):<{length}}")
            report_content.append(' | '.join(line_parts))
    else:
        report_content.append("No active cars found.")
        
    report_content.append("\n\n--- üßë ACTIVE CUSTOMER DIRECTORY ---")
    cust_fields = [('ID', 5), ('Name', 45), ('Phone', 15)] # ‡πÉ‡∏ä‡πâ 45s ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
    cust_records = cust_mgr.get_all_records()
    report_content.append(f"Total Active Customers: {len(cust_records)}")
    
    header_line = ' | '.join(f"{name:<{length}}" for name, length in cust_fields)
    report_content.append(header_line)
    report_content.append("-" * (sum(length for _, length in cust_fields) + len(cust_fields) * 3))
    
    if cust_records:
        for cust in cust_records:
            line_parts = []
            for field_name, length in cust_fields:
                value = cust.get(field_name, '')
                line_parts.append(f"{str(value):<{length}}")
            report_content.append(' | '.join(line_parts))
    else:
        report_content.append("No active customers found.")

    report_content.append("\n\n--- üßæ ACTIVE RENTAL AGREEMENTS ---")
    rental_fields = [('ID', 5), ('CustomerID', 10), ('CarID', 7), ('StartDate', 10), ('Days', 5), ('TotalPrice', 12)]
    rental_records = rental_mgr.get_all_records()
    report_content.append(f"Total Active Rentals: {len(rental_records)}")
    
    header_line = ' | '.join(f"{name:<{length}}" for name, length in rental_fields)
    report_content.append(header_line)
    report_content.append("-" * (sum(length for _, length in rental_fields) + len(rental_fields) * 3))
    
    if rental_records:
        for rent in rental_records:
            line_parts = []
            for field_name, length in rental_fields:
                value = rent.get(field_name, '')
                if isinstance(value, float):
                    line_parts.append(f"{value:.2f}".ljust(length))
                elif field_name == 'StartDate':
                     # ‡πÅ‡∏™‡∏î‡∏á StartDate (DDMMYYYY)
                     line_parts.append(f"{value}".ljust(length)) 
                else:
                    line_parts.append(f"{str(value):<{length}}")
            report_content.append(' | '.join(line_parts))
    else:
        report_content.append("No active rental agreements found.")

    report_content.append("\n" + "=" * 70)
    
    try:
        with open(report_filename, 'w', encoding='utf-8') as f:
            f.write('\n'.join(report_content) + '\n')
        print(f"\nüìÑ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏ß‡∏° (Master Report) ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏µ‡πà '{report_filename}'.")
    except IOError as e:
        print(f"‚ùå Error writing master report file: {e}")

# ==============================================================================
# 5. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏¢‡πà‡∏≠‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ Module
# ==============================================================================

def run_car_menu(manager: CarManager):
    while True:
        print("\n=== [1] ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå ===")
        print("A: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå | U: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç | D: ‡∏•‡∏ö (Soft Delete)")
        print("V: ‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î | S: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ ID")
        print("X: ‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å")
        
        choice = get_user_choice(">> ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ", ['A', 'U', 'D', 'V', 'S', 'X'])

        if choice == 'A':
            print("\n-- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå --")
            car_id = get_int_input("ID ‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå: ")
            model = input("‡∏£‡∏∏‡πà‡∏ô‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 30 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£): ").strip()[:30]
            plate = input("‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 10 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£): ").strip()[:10]
            rate = get_float_input("‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô: ")
            manager.add_record({'ID': car_id, 'Model': model, 'LicensePlate': plate, 'DailyRate': rate})

        elif choice == 'U':
            print("\n-- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå --")
            car_id = get_int_input("ID ‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ")
            rate = get_float_input("‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ")
            manager.update_record(car_id, {'DailyRate': rate})

        elif choice == 'D':
            print("\n-- ‡∏•‡∏ö‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå --")
            car_id = get_int_input("ID ‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö (Soft Delete): ")
            manager.delete_record(car_id)

        elif choice == 'V':
            print("\n-- ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Active) --")
            cars = manager.get_all_records()
            if not cars:
                print("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà")
            else:
                for car in cars:
                    print(f"ID: {car['ID']} | Model: {car['Model']:<30} | Plate: {car['LicensePlate']:<10} | Rate: {car['DailyRate']:.2f}")

        elif choice == 'S':
            print("\n-- ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡∏î‡πâ‡∏ß‡∏¢ ID --")
            car_id = get_int_input("ID ‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: ")
            
            result = manager.get_record_by_id(car_id) 
            
            if result is not None:
                car, offset = result
                print(f"‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ID: {car['ID']} | Model: {car['Model']} | Plate: {car['LicensePlate']} | Rate: {car['DailyRate']:.2f} (Offset: {offset} bytes)")
            else:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå ID ‡∏ô‡∏µ‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß")

        elif choice == 'X':
            break

def run_customer_menu(manager: CustomerManager):
    while True:
        print("\n=== [2] ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ===")
        print("A: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ | U: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç | D: ‡∏•‡∏ö (Soft Delete)")
        print("V: ‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î | S: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ ID")
        print("X: ‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å")
        
        choice = get_user_choice(">> ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ", ['A', 'U', 'D', 'V', 'S', 'X'])
        
        if choice == 'A':
            print("\n-- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ --")
            cust_id = get_int_input("ID ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ")
            name = input("‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 30 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£): ").strip()[:30]
            phone = input("‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 15 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£): ").strip()[:15]
            manager.add_record({'ID': cust_id, 'Name': name, 'Phone': phone})

        elif choice == 'U':
            print("\n-- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ --")
            cust_id = get_int_input("ID ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ")
            phone = input("‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÉ‡∏´‡∏°‡πà: ").strip()[:15]
            manager.update_record(cust_id, {'Phone': phone})

        elif choice == 'D':
            print("\n-- ‡∏•‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ --")
            cust_id = get_int_input("ID ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö (Soft Delete): ")
            manager.delete_record(cust_id)
            
        elif choice == 'V':
            print("\n-- ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Active) --")
            customers = manager.get_all_records()
            if not customers:
                print("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà")
            else:
                for cust in customers:
                    print(f"ID: {cust['ID']} | Name: {cust['Name']:<30} | Phone: {cust['Phone']}")
        
        elif choice == 'S':
            print("\n-- ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢ ID --")
            cust_id = get_int_input("ID ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: ")
            
            result = manager.get_record_by_id(cust_id)
            
            if result is not None:
                cust, offset = result
                print(f"‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ID: {cust['ID']} | Name: {cust['Name']} | Phone: {cust['Phone']} (Offset: {offset} bytes)")
            else:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ID ‡∏ô‡∏µ‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß")

        elif choice == 'X':
            break

def run_rental_menu(manager: RentalManager, car_mgr: CarManager, cust_mgr: CustomerManager):
    while True:
        print("\n=== [3] ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏ä‡πà‡∏≤ ===")
        print("A: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤ | V: ‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î | S: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ ID")
<<<<<<< HEAD:PROJECT/Rental Program.py
        print("D: ‡∏Ñ‡∏∑‡∏ô‡∏£‡∏ñ (Soft Delete)")
        print("X: ‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å")
        
        choice = get_user_choice(">> ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ", ['A', 'V', 'D', 'S', 'X'])
=======
        print("D: ‡∏Ñ‡∏∑‡∏ô‡∏£‡∏ñ (Soft Delete) | R: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ (.txt)")
        print("L: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏ä‡πà‡∏≤ (.txt)") 
        print("X: ‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å")
        
        choice = get_user_choice(">> ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ", ['A', 'V', 'D', 'S', 'R', 'L', 'X'])
>>>>>>> 69bfc037f7880797c02da484f014d7fe289f2c67:PROJECT/CarManager.py
        
        if choice == 'A':
            print("\n-- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏ä‡πà‡∏≤ --")
            rental_id = get_int_input("ID ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏ä‡πà‡∏≤: ")
            cust_id = get_int_input("ID ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ")
            car_id = get_int_input("ID ‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå: ")
            
            if not cust_mgr.get_record_by_id(cust_id):
                print("‚ùå ID ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß")
                continue
            car_result = car_mgr.get_record_by_id(car_id)
            if not car_result:
                print("‚ùå ID ‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏ñ‡∏ñ‡∏π‡∏Å‡πÄ‡∏ä‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà/‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß")
                continue
            
            car_data, _ = car_result
            daily_rate = car_data['DailyRate']
            
            start_date_int = get_date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ä‡πà‡∏≤ (DDMMYYYY): ")
            end_date_int = get_date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πà‡∏≤ (DDMMYYYY): ")

            try:
                start_date_str = str(start_date_int).zfill(8)
                end_date_str = str(end_date_int).zfill(8)
                start_date_obj = datetime.datetime.strptime(start_date_str, '%d%m%Y')
                end_date_obj = datetime.datetime.strptime(end_date_str, '%d%m%Y')
                
                print(f"  üóìÔ∏è ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡πà‡∏≤: {start_date_obj.strftime('%d-%m-%Y')} ‡∏ñ‡∏∂‡∏á {end_date_obj.strftime('%d-%m-%Y')}")
                
                days = (end_date_obj - start_date_obj).days + 1 
                total_price = daily_rate * days
                print(f"‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏ä‡πà‡∏≤: {days} ‡∏ß‡∏±‡∏ô")
            except ValueError:
                print("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏ä‡πà‡∏≤ 1 ‡∏ß‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
                total_price = daily_rate 
                days = 1

            print(f"‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°: {daily_rate:.2f} * {days} ‡∏ß‡∏±‡∏ô = {total_price:.2f} ‡∏ö‡∏≤‡∏ó")
            
            manager.add_record({
                'ID': rental_id, 'CustomerID': cust_id, 'CarID': car_id, 
                'StartDate': start_date_int, 
                'EndDate': end_date_int,
                'TotalPrice': total_price
            })

            car_mgr.update_record(car_id, {'IsRented': True}) 
            print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏ä‡πà‡∏≤ ID {rental_id} ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏ñ ID {car_id} ‡πÄ‡∏õ‡πá‡∏ô '‡∏ñ‡∏π‡∏Å‡πÄ‡∏ä‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢.")

        elif choice == 'V':
            print("\n-- ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Active) --")
            rentals = manager.get_all_records()
            if not rentals:
                print("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà")
            else:
                for rent in rentals:
                    start_date_display = format_date_display(rent.get('StartDate', 0))
                    end_date_display = format_date_display(rent.get('EndDate', 0))

                    print(f"ID: {rent['ID']} | CustID: {rent['CustomerID']} | CarID: {rent['CarID']} | Start: {start_date_display} | End: {end_date_display} | Total: {rent['TotalPrice']:.2f}")

        

        elif choice == 'D':
            print("\n-- ‡∏õ‡∏¥‡∏î/‡∏Ñ‡∏∑‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏ä‡πà‡∏≤ (Soft Delete) --")
            rental_id = get_int_input("ID ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏£‡∏ñ: ")
            
            result = manager.get_record_by_id(rental_id)
            if result is None:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏ä‡πà‡∏≤ ID {rental_id} ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß.")
                return

            rent_data, _ = result
            car_id = rent_data['CarID']
            
            if manager.delete_record(rental_id):
                print(f"‚úÖ ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏ä‡πà‡∏≤ ID {rental_id} ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß (Soft Deleted).")
                
                car_mgr.update_record(car_id, {'IsRented': False})
                print(f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏ñ ID {car_id} ‡πÄ‡∏õ‡πá‡∏ô '‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡πà‡∏≤' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢.")
            else:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏¥‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏ä‡πà‡∏≤ ID {rental_id} ‡πÑ‡∏î‡πâ.")

        elif choice == 'S':
            print("\n-- ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡∏î‡πâ‡∏ß‡∏¢ ID --")
            rental_id = get_int_input("ID ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: ")
            
            result = manager.get_record_by_id(rental_id)
            
            if result is not None:
                rent, _ = result 
                
                start_date_display = format_date_display(rent.get('StartDate', 0))
                end_date_display = format_date_display(rent.get('EndDate', 0))

                print(f"‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ID: {rent['ID']} | CustID: {rent['CustomerID']} | CarID: {rent['CarID']} | Start: {start_date_display} | End: {end_date_display} | Total: {rent['TotalPrice']:.2f}")
            else:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏ä‡πà‡∏≤ ID ‡∏ô‡∏µ‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß")

<<<<<<< HEAD:PROJECT/Rental Program.py
        elif choice == 'X':
            break


def generate_detailed_summary_report(car_mgr: 'CarManager', cust_mgr: 'CustomerManager', rental_mgr: 'RentalManager', report_filename: str = 'detailed_summary_report.txt'):
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Active/Rented/Deleted) 
    ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    """
    
    all_car_records = car_mgr.get_all_records() #
    active_rentals = rental_mgr.get_all_records()
    rented_car_ids = {rent['CarID'] for rent in active_rentals}
    rental_by_car_id = {rent['CarID']: rent for rent in active_rentals}
=======
        elif choice == 'R':
            manager.generate_report(
                "RENTAL AGREEMENT SUMMARY", 
                [('ID', 5), ('CustomerID', 10), ('CarID', 7), ('StartDate', 10), ('Days', 5), ('TotalPrice', 12)], 
                'rental_report.txt'
            )
        
        elif choice == 'L':
            generate_rental_detail_report(manager, cust_mgr, car_mgr)

        elif choice == 'X':
            break

import struct
from collections import defaultdict
import datetime
import os
from typing import Dict, Any, Tuple, Optional, List

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Helper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
def _get_all_records_from_manager(manager):
    records = []
    manager.file.seek(0, os.SEEK_SET)
    while True:
        record_bytes = manager.file.read(manager.record_size)
        if len(record_bytes) < manager.record_size: break
        try:
            records.append(manager._unpack_record(record_bytes))
        except struct.error: continue 
    return records

def generate_detailed_summary_report(car_mgr: 'CarManager', cust_mgr: 'CustomerManager', rental_mgr: 'RentalManager', report_filename: str = 'detailed_summary_report.txt'):
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î (Rental Detail + Statistics)
    """
    
    # 1. ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    all_car_records = _get_all_records_from_manager(car_mgr)
    active_rentals = rental_mgr.get_all_records()
    rented_car_ids = {rent['CarID'] for rent in active_rentals} 
>>>>>>> 69bfc037f7880797c02da484f014d7fe289f2c67:PROJECT/CarManager.py
    
    total_cars = len(all_car_records)
    active_cars = [car for car in all_car_records if car['IsActive']]
    deleted_cars = total_cars - len(active_cars)
    currently_rented = len(rented_car_ids)
    available_now = len(active_cars) - currently_rented
    
    rate_list = [car['DailyRate'] for car in active_cars]
    min_rate = min(rate_list) if rate_list else 0.00
    max_rate = max(rate_list) if rate_list else 0.00
    avg_rate = sum(rate_list) / len(rate_list) if rate_list else 0.00
    
<<<<<<< HEAD:PROJECT/Rental Program.py
    cars_by_brand = {}
    for car in all_car_records:
        if car['IsActive'] and car['ID'] not in rented_car_ids:
            full_model_name = car['Model'].strip() 
            brand = full_model_name.split(' ')[0] 
            cars_by_brand[brand] = cars_by_brand.get(brand, 0) + 1
            
    report_content = []
    
    title_line = "Detailed Rental Summary Report"
    report_content.append("=" * 155)
    report_content.append(f"{' ' * ((150 - len(title_line)) // 2)}{title_line}")
    report_content.append("=" * 155)
    report_content.append(f"Generated At : {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}") 
    report_content.append(f"Endianness   : Little-Endian")
    report_content.append(f"Time Zone    : +07:00 (Indochina Time)")
    report_content.append(f"Encoding     : UTF-8 (fixed-length)")
    report_content.append("-" * 155)
    
    fields = [
        ('Car ID', 6), ('Model', 20), ('Plate', 12), ('Rate', 10), 
        ('Status', 10), ('Rented', 8), 
        ('Cust ID', 8), ('Name', 30), ('Start Date', 10), ('End Date', 10) 
    ]
    
    header_line = ' | '.join(f"{name:<{length}}" for name, length in fields)
    
    report_content.append("ALL CARS DETAIL:") 
    report_content.append(header_line)
    report_content.append("-" * (sum(length for _, length in fields) + len(fields) * 3))

    for car_data in all_car_records: 
        car_id = car_data['ID']
        car_model = car_data['Model'].strip('\x00')
        car_plate = car_data.get('LicensePlate', 'N/A').strip('\x00')
        car_rate = car_data.get('DailyRate', 0.00)
        
        cust_id_display = ""
        cust_name = ""
        start_date_display = ""
        end_date_display = ""
        rented_flag = "No" 

        if not car_data['IsActive']:
            car_status_text = "DELETED" 
        elif car_id in rental_by_car_id:
            rent = rental_by_car_id[car_id]
            
            cust_result = cust_mgr.get_record_by_id(rent['CustomerID'])
            cust_name = cust_result[0]['Name'].strip('\x00') if cust_result else "N/A (Deleted)"
            cust_id_display = rent['CustomerID']
            
            start_date_display = format_date_display(rent.get('StartDate', 0)) 
            end_date_display = format_date_display(rent.get('EndDate', 0))
            
            car_status_text = "Rented" 
            rented_flag = "Yes"
            
        else:
            car_status_text = "Available"
        
        line_parts = [
            f"{car_data['ID']:<6}",
            f"{car_model:<20}",
            f"{car_plate:<12}", 
            f"{car_rate:,.2f}".ljust(10),
            f"{car_status_text:<10}",
            f"{rented_flag:<8}",
            f"{cust_id_display:<8}" if cust_id_display else f"{'':<8}",
            f"{cust_name:<30}" if cust_name else f"{'':<30}",
            f"{start_date_display:<10}" if start_date_display else f"{'':<10}",
            f"{end_date_display:<10}" if end_date_display else f"{'':<10}",
        ]

        report_content.append(' | '.join(line_parts))
    
    report_content.append("=" * 155)

=======
    model_count = defaultdict(int)
    for car in active_cars:
        brand = car['Model'].split(' ')[0] # ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á Model ‡πÄ‡∏õ‡πá‡∏ô Brand
        model_count[brand] += 1 
        
    # 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
    report_content = []
    report_content.append("Detailed Rental Summary Report")
    report_content.append(f"Generated At : {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    report_content.append(f"Endianness   : Little-Endian")
    report_content.append(f"Time Zone    : +07:00 (Indochina Time)")
    report_content.append("-" * 120)
    
    # 3. ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏ä‡πà‡∏≤ (Active Rental Detail Table)
    
    fields = [
        ('Cust ID', 8), ('Name', 30), ('Car ID', 6), ('Model', 20),
        ('Start Date', 10), ('Return Date', 10), ('Car Status', 10), ('Rented', 8)
    ]
    
    header_line = ' | '.join(f"{name:<{length}}" for name, length in fields)
    report_content.append("ACTIVE RENTAL AGREEMENTS DETAIL:")
    report_content.append(header_line)
    report_content.append("-" * (sum(length for _, length in fields) + len(fields) * 3))

    if active_rentals:
        for rent in active_rentals:
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Customer ‡πÅ‡∏•‡∏∞ Car ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Car ID)
            cust_name = cust_mgr.get_record_by_id(rent['CustomerID'])[0]['Name'] if cust_mgr.get_record_by_id(rent['CustomerID']) else "N/A (Deleted)"

            car_result = car_mgr.get_record_by_id(rent['CarID'])
            
            # üü¢ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå: ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ Default ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö
            car_data = car_result[0] if car_result else {'Model': "N/A (Invalid)", 'IsActive': False}
            
            car_model = car_data['Model']
            car_is_active = car_data['IsActive']
            car_status_text = 'Active' if car_is_active else 'Inactive'
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏∑‡∏ô
            try:
                start_date_str = str(rent['StartDate']).zfill(8)
                start_date = datetime.datetime.strptime(start_date_str, '%d%m%Y')
                return_date = start_date + datetime.timedelta(days=rent['Days'])
                return_date_str = return_date.strftime('%d%m%Y')
            except ValueError:
                return_date_str = "Invalid"

            line_parts = [
                f"{rent['CustomerID']:<8}",
                f"{cust_name:<30}",
                f"{rent['CarID']:<6}",
                f"{car_model:<20}",
                f"{rent['StartDate']:<10}",
                f"{return_date_str:<10}",
                f"{car_status_text:<10}",
                f"{'Yes':<8}"
            ]

            report_content.append(' | '.join(line_parts))
    else:
        report_content.append("No active rental agreements found.")
        
    report_content.append("=" * 120)

    # 4. Summary ‡πÅ‡∏•‡∏∞ Statistics
>>>>>>> 69bfc037f7880797c02da484f014d7fe289f2c67:PROJECT/CarManager.py
    report_content.append("\nSummary (‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Active)")
    report_content.append(f"- Total Cars (records) : {total_cars}")
    report_content.append(f"- Active Cars          : {len(active_cars)}")
    report_content.append(f"- Deleted Cars         : {deleted_cars}")
    report_content.append(f"- Currently Rented     : {currently_rented}")
    report_content.append(f"- Available Now        : {available_now}")
    
    report_content.append("\nRate Statistics (THB/day, Active only)")
    report_content.append(f"- Min : {min_rate:,.2f}")
    report_content.append(f"- Max : {max_rate:,.2f}")
    report_content.append(f"- Avg : {avg_rate:,.2f}")
    
<<<<<<< HEAD:PROJECT/Rental Program.py
    report_content.append("\nCars by Brand (Available Only)")
    if cars_by_brand:
        for brand, count in cars_by_brand.items():
            report_content.append(f"- {brand} : {count}")
    else:
        report_content.append("- None Available")
    
    report_content.append("\n" + "=" * 155)

=======
    report_content.append("\nCars by Model (Active only)")
    if model_count:
        for model, count in sorted(model_count.items()):
            report_content.append(f"- {model} : {count}")
    else:
        report_content.append("No active models found.")
    
    report_content.append("\n" + "=" * 120)
    
    # 5. ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå
>>>>>>> 69bfc037f7880797c02da484f014d7fe289f2c67:PROJECT/CarManager.py
    try:
        with open(report_filename, 'w', encoding='utf-8') as f:
            f.write('\n'.join(report_content) + '\n')
        print(f"\nüìÑ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏µ‡πà '{report_filename}'.")
    except IOError as e:
        print(f"‚ùå Error writing report file: {e}")

<<<<<<< HEAD:PROJECT/Rental Program.py
def format_date_display(date_int: int) -> str: 
    """Converts DDMMYYYY (int) to DD-MM-YYYY (str) for display."""
    date_str = str(date_int).zfill(8)
    if date_str == '00000000':
        return "N/A"

    try:
        date_obj = datetime.datetime.strptime(date_str, '%d%m%Y')
        return date_obj.strftime('%d-%m-%Y') 
    except ValueError:
        return "Invalid Date"
    
=======
>>>>>>> 69bfc037f7880797c02da484f014d7fe289f2c67:PROJECT/CarManager.py
# ==============================================================================
# 6. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Main
# ==============================================================================

def main():
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå...")
    car_mgr = CarManager()
    cust_mgr = CustomerManager()
    rental_mgr = RentalManager()

    try:
        while True:
            print("\n" + "="*50)
            print("             ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå (MAIN MENU)")
            print("="*50)
            print("[1] ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå")
            print("[2] ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤")
            print("[3] ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏ä‡πà‡∏≤")
<<<<<<< HEAD:PROJECT/Rental Program.py
            print("[R] ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (.txt)") 
=======
            print("[R] ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (.txt)") # üü¢ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏ô‡∏π
>>>>>>> 69bfc037f7880797c02da484f014d7fe289f2c67:PROJECT/CarManager.py
            print("[X] ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö (‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå)")

            main_choice = get_user_choice(">> ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π: ", ['1', '2', '3', 'R', 'X']) 

            if main_choice == '1':
                run_car_menu(car_mgr)
            elif main_choice == '2':
                run_customer_menu(cust_mgr)
            elif main_choice == '3':
                run_rental_menu(rental_mgr, car_mgr, cust_mgr)
<<<<<<< HEAD:PROJECT/Rental Program.py
            elif main_choice == 'R':
                generate_detailed_summary_report(
                    car_mgr,
                    cust_mgr, 
                    rental_mgr,
                    report_filename='detailed_summary_report.txt'
                )
            elif main_choice == 'X':
                print("\n==============================================")
                print("  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢...")
                print("==============================================")
                generate_detailed_summary_report(
                    car_mgr, 
                    cust_mgr, 
                    rental_mgr, 
                    report_filename='final_exit_summary.txt'
                )
                
                print("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CarManager...")
                car_mgr.close() 
                print("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CustomerManager...")
                cust_mgr.close()
                print("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• RentalManager...")
                rental_mgr.close()
                
                print("‚úÖ ‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                break 
                
    except Exception as e:
        print(f"\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á: {e}")
=======
            
            # üìå ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
            elif main_choice == 'R':
                generate_detailed_summary_report(
                    rental_mgr, 
                    cust_mgr, 
                    car_mgr, 
                    report_filename='detailed_summary_report.txt'
                )
            
            elif main_choice == 'X':
                print("\n‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...")
                break
        
    except Exception as e:
        print(f"\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á: {e}")
            
    finally:
        print("üíæ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...")
        car_mgr.close()
        cust_mgr.close()
        rental_mgr.close()
        print("‚úÖ ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
>>>>>>> 69bfc037f7880797c02da484f014d7fe289f2c67:PROJECT/CarManager.py

if __name__ == '__main__':
    main()